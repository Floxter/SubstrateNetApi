//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Base;
using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.FrameSupport;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.SpConsensusBabe;
using SubstrateNetApi.Model.SpConsensusSlots;
using SubstrateNetApi.Model.SpSession;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletBabe
{
    
    
    public sealed class BabeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public BabeStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        public static string EpochIndexParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "EpochIndex", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> EpochIndex
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U64> EpochIndex(CancellationToken token)
        {
            string parameters = BabeStorage.EpochIndexParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U64>(parameters, token);
        }
        
        public static string AuthoritiesParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "Authorities", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> Authorities
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSupport.WeakBoundedVec> Authorities(CancellationToken token)
        {
            string parameters = BabeStorage.AuthoritiesParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSupport.WeakBoundedVec>(parameters, token);
        }
        
        public static string GenesisSlotParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "GenesisSlot", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> GenesisSlot
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusSlots.Slot> GenesisSlot(CancellationToken token)
        {
            string parameters = BabeStorage.GenesisSlotParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusSlots.Slot>(parameters, token);
        }
        
        public static string CurrentSlotParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "CurrentSlot", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> CurrentSlot
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusSlots.Slot> CurrentSlot(CancellationToken token)
        {
            string parameters = BabeStorage.CurrentSlotParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusSlots.Slot>(parameters, token);
        }
        
        public static string RandomnessParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "Randomness", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> Randomness
        /// </summary>
        public async Task<SubstrateNetApi.Model.Base.Arr32U8> Randomness(CancellationToken token)
        {
            string parameters = BabeStorage.RandomnessParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Base.Arr32U8>(parameters, token);
        }
        
        public static string PendingEpochConfigChangeParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "PendingEpochConfigChange", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> PendingEpochConfigChange
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusBabe.EnumNextConfigDescriptor> PendingEpochConfigChange(CancellationToken token)
        {
            string parameters = BabeStorage.PendingEpochConfigChangeParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusBabe.EnumNextConfigDescriptor>(parameters, token);
        }
        
        public static string NextRandomnessParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "NextRandomness", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> NextRandomness
        /// </summary>
        public async Task<SubstrateNetApi.Model.Base.Arr32U8> NextRandomness(CancellationToken token)
        {
            string parameters = BabeStorage.NextRandomnessParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Base.Arr32U8>(parameters, token);
        }
        
        public static string NextAuthoritiesParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "NextAuthorities", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> NextAuthorities
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSupport.WeakBoundedVec> NextAuthorities(CancellationToken token)
        {
            string parameters = BabeStorage.NextAuthoritiesParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSupport.WeakBoundedVec>(parameters, token);
        }
        
        public static string SegmentIndexParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "SegmentIndex", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> SegmentIndex
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> SegmentIndex(CancellationToken token)
        {
            string parameters = BabeStorage.SegmentIndexParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        public static string UnderConstructionParams(SubstrateNetApi.Model.Types.Primitive.U32 key)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Babe", "UnderConstruction", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return parameters;
        }
        
        /// <summary>
        /// >> UnderConstruction
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSupport.BoundedVec> UnderConstruction(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = BabeStorage.UnderConstructionParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSupport.BoundedVec>(parameters, token);
        }
        
        public static string InitializedParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "Initialized", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> Initialized
        /// </summary>
        public async Task<BaseOpt<SubstrateNetApi.Model.Base.Arr32U8>> Initialized(CancellationToken token)
        {
            string parameters = BabeStorage.InitializedParams();
            return await _client.GetStorageAsync<BaseOpt<SubstrateNetApi.Model.Base.Arr32U8>>(parameters, token);
        }
        
        public static string AuthorVrfRandomnessParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "AuthorVrfRandomness", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> AuthorVrfRandomness
        /// </summary>
        public async Task<BaseOpt<SubstrateNetApi.Model.Base.Arr32U8>> AuthorVrfRandomness(CancellationToken token)
        {
            string parameters = BabeStorage.AuthorVrfRandomnessParams();
            return await _client.GetStorageAsync<BaseOpt<SubstrateNetApi.Model.Base.Arr32U8>>(parameters, token);
        }
        
        public static string EpochStartParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "EpochStart", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> EpochStart
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>> EpochStart(CancellationToken token)
        {
            string parameters = BabeStorage.EpochStartParams();
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>(parameters, token);
        }
        
        public static string LatenessParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "Lateness", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> Lateness
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> Lateness(CancellationToken token)
        {
            string parameters = BabeStorage.LatenessParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        public static string EpochConfigParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "EpochConfig", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> EpochConfig
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusBabe.BabeEpochConfiguration> EpochConfig(CancellationToken token)
        {
            string parameters = BabeStorage.EpochConfigParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusBabe.BabeEpochConfiguration>(parameters, token);
        }
        
        public static string NextEpochConfigParams()
        {
            var parameters = RequestGenerator.GetStorage("Babe", "NextEpochConfig", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> NextEpochConfig
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpConsensusBabe.BabeEpochConfiguration> NextEpochConfig(CancellationToken token)
        {
            string parameters = BabeStorage.NextEpochConfigParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpConsensusBabe.BabeEpochConfiguration>(parameters, token);
        }
    }
    
    public sealed class BabeCalls
    {
        
        /// <summary>
        /// >> report_equivocation
        /// </summary>
        public static Method ReportEquivocation(SubstrateNetApi.Model.SpConsensusSlots.EquivocationProof equivocation_proof, SubstrateNetApi.Model.SpSession.MembershipProof key_owner_proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(equivocation_proof.Encode());
            byteArray.AddRange(key_owner_proof.Encode());
            return new Method(2, "Babe", 0, "report_equivocation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> report_equivocation_unsigned
        /// </summary>
        public static Method ReportEquivocationUnsigned(SubstrateNetApi.Model.SpConsensusSlots.EquivocationProof equivocation_proof, SubstrateNetApi.Model.SpSession.MembershipProof key_owner_proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(equivocation_proof.Encode());
            byteArray.AddRange(key_owner_proof.Encode());
            return new Method(2, "Babe", 1, "report_equivocation_unsigned", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> plan_config_change
        /// </summary>
        public static Method PlanConfigChange(SubstrateNetApi.Model.SpConsensusBabe.EnumNextConfigDescriptor config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(config.Encode());
            return new Method(2, "Babe", 2, "plan_config_change", byteArray.ToArray());
        }
    }
    
    public enum BabeErrors
    {
        
        /// <summary>
        /// >> InvalidEquivocationProof
        /// </summary>
        InvalidEquivocationProof,
        
        /// <summary>
        /// >> InvalidKeyOwnershipProof
        /// </summary>
        InvalidKeyOwnershipProof,
        
        /// <summary>
        /// >> DuplicateOffenceReport
        /// </summary>
        DuplicateOffenceReport,
    }
}
