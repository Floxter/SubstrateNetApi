//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Base;
using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.FrameSupport;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletElectionProviderMultiPhase;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.SpNposElections;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletElectionProviderMultiPhase
{
    
    
    public sealed class ElectionProviderMultiPhaseStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public ElectionProviderMultiPhaseStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Round
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> Round(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "Round", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> CurrentPhase
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.EnumPhase> CurrentPhase(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "CurrentPhase", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.EnumPhase>(parameters, token);
        }
        
        /// <summary>
        /// >> QueuedSolution
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.ReadySolution> QueuedSolution(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "QueuedSolution", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.ReadySolution>(parameters, token);
        }
        
        /// <summary>
        /// >> Snapshot
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.RoundSnapshot> Snapshot(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "Snapshot", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.RoundSnapshot>(parameters, token);
        }
        
        /// <summary>
        /// >> DesiredTargets
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> DesiredTargets(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "DesiredTargets", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> SnapshotMetadata
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.SolutionOrSnapshotSize> SnapshotMetadata(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "SnapshotMetadata", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.SolutionOrSnapshotSize>(parameters, token);
        }
        
        /// <summary>
        /// >> SignedSubmissionNextIndex
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> SignedSubmissionNextIndex(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "SignedSubmissionNextIndex", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> SignedSubmissionIndices
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSupport.BoundedBTreeMap> SignedSubmissionIndices(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "SignedSubmissionIndices", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSupport.BoundedBTreeMap>(parameters, token);
        }
        
        /// <summary>
        /// >> SignedSubmissionsMap
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.SignedSubmission> SignedSubmissionsMap(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "SignedSubmissionsMap", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.SignedSubmission>(parameters, token);
        }
        
        /// <summary>
        /// >> MinimumUntrustedScore
        /// </summary>
        public async Task<SubstrateNetApi.Model.Base.Arr3U128> MinimumUntrustedScore(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("ElectionProviderMultiPhase", "MinimumUntrustedScore", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Base.Arr3U128>(parameters, token);
        }
    }
    
    public sealed class ElectionProviderMultiPhaseCalls
    {
        
        /// <summary>
        /// >> submit_unsigned
        /// </summary>
        public static Method SubmitUnsigned(SubstrateNetApi.Model.PalletElectionProviderMultiPhase.RawSolution raw_solution, SubstrateNetApi.Model.PalletElectionProviderMultiPhase.SolutionOrSnapshotSize witness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(raw_solution.Encode());
            byteArray.AddRange(witness.Encode());
            return new Method(8, "ElectionProviderMultiPhase", 0, "submit_unsigned", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_minimum_untrusted_score
        /// </summary>
        public static Method SetMinimumUntrustedScore(BaseOpt<SubstrateNetApi.Model.Base.Arr3U128> maybe_next_score)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_next_score.Encode());
            return new Method(8, "ElectionProviderMultiPhase", 1, "set_minimum_untrusted_score", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_emergency_election_result
        /// </summary>
        public static Method SetEmergencyElectionResult(BaseVec<BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.SpNposElections.Support>> supports)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(supports.Encode());
            return new Method(8, "ElectionProviderMultiPhase", 2, "set_emergency_election_result", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> submit
        /// </summary>
        public static Method Submit(SubstrateNetApi.Model.PalletElectionProviderMultiPhase.RawSolution raw_solution, SubstrateNetApi.Model.Types.Primitive.U32 num_signed_submissions)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(raw_solution.Encode());
            byteArray.AddRange(num_signed_submissions.Encode());
            return new Method(8, "ElectionProviderMultiPhase", 3, "submit", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SolutionStored
    /// </summary>
    public sealed class EventSolutionStored : BaseTuple<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.EnumElectionCompute, SubstrateNetApi.Model.Types.Primitive.Bool>
    {
    }
    
    /// <summary>
    /// >> ElectionFinalized
    /// </summary>
    public sealed class EventElectionFinalized : BaseTuple<BaseOpt<SubstrateNetApi.Model.PalletElectionProviderMultiPhase.EnumElectionCompute>>
    {
    }
    
    /// <summary>
    /// >> Rewarded
    /// </summary>
    public sealed class EventRewarded : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Slashed
    /// </summary>
    public sealed class EventSlashed : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> SignedPhaseStarted
    /// </summary>
    public sealed class EventSignedPhaseStarted : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> UnsignedPhaseStarted
    /// </summary>
    public sealed class EventUnsignedPhaseStarted : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    public enum ElectionProviderMultiPhaseErrors
    {
        
        /// <summary>
        /// >> PreDispatchEarlySubmission
        /// </summary>
        PreDispatchEarlySubmission,
        
        /// <summary>
        /// >> PreDispatchWrongWinnerCount
        /// </summary>
        PreDispatchWrongWinnerCount,
        
        /// <summary>
        /// >> PreDispatchWeakSubmission
        /// </summary>
        PreDispatchWeakSubmission,
        
        /// <summary>
        /// >> SignedQueueFull
        /// </summary>
        SignedQueueFull,
        
        /// <summary>
        /// >> SignedCannotPayDeposit
        /// </summary>
        SignedCannotPayDeposit,
        
        /// <summary>
        /// >> SignedInvalidWitness
        /// </summary>
        SignedInvalidWitness,
        
        /// <summary>
        /// >> SignedTooMuchWeight
        /// </summary>
        SignedTooMuchWeight,
        
        /// <summary>
        /// >> OcwCallWrongEra
        /// </summary>
        OcwCallWrongEra,
        
        /// <summary>
        /// >> MissingSnapshotMetadata
        /// </summary>
        MissingSnapshotMetadata,
        
        /// <summary>
        /// >> InvalidSubmissionIndex
        /// </summary>
        InvalidSubmissionIndex,
        
        /// <summary>
        /// >> CallNotAllowed
        /// </summary>
        CallNotAllowed,
    }
}
