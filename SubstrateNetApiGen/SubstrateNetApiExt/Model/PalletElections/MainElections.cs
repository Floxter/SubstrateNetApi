//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletElectionsPhragmen;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.SpRuntime;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletElections
{
    
    
    public sealed class ElectionsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public ElectionsStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Members
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletElectionsPhragmen.SeatHolder>> Members(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Elections", "Members", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletElectionsPhragmen.SeatHolder>>(parameters, token);
        }
        
        /// <summary>
        /// >> RunnersUp
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletElectionsPhragmen.SeatHolder>> RunnersUp(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Elections", "RunnersUp", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletElectionsPhragmen.SeatHolder>>(parameters, token);
        }
        
        /// <summary>
        /// >> Candidates
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Types.Primitive.U128>>> Candidates(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Elections", "Candidates", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Types.Primitive.U128>>>(parameters, token);
        }
        
        /// <summary>
        /// >> ElectionRounds
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ElectionRounds(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Elections", "ElectionRounds", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Voting
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletElectionsPhragmen.Voter> Voting(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Elections", "Voting", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletElectionsPhragmen.Voter>(parameters, token);
        }
    }
    
    public sealed class ElectionsCalls
    {
        
        /// <summary>
        /// >> vote
        /// </summary>
        public static Method Vote(BaseVec<SubstrateNetApi.Model.SpCore.AccountId32> votes, BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(votes.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(14, "Elections", 0, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_voter
        /// </summary>
        public static Method RemoveVoter()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(14, "Elections", 1, "remove_voter", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> submit_candidacy
        /// </summary>
        public static Method SubmitCandidacy(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> candidate_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate_count.Encode());
            return new Method(14, "Elections", 2, "submit_candidacy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> renounce_candidacy
        /// </summary>
        public static Method RenounceCandidacy(SubstrateNetApi.Model.PalletElectionsPhragmen.EnumRenouncing renouncing)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(renouncing.Encode());
            return new Method(14, "Elections", 3, "renounce_candidacy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_member
        /// </summary>
        public static Method RemoveMember(SubstrateNetApi.Model.SpRuntime.EnumMultiAddress who, SubstrateNetApi.Model.Types.Primitive.Bool has_replacement)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(has_replacement.Encode());
            return new Method(14, "Elections", 4, "remove_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clean_defunct_voters
        /// </summary>
        public static Method CleanDefunctVoters(SubstrateNetApi.Model.Types.Primitive.U32 num_voters, SubstrateNetApi.Model.Types.Primitive.U32 num_defunct)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(num_voters.Encode());
            byteArray.AddRange(num_defunct.Encode());
            return new Method(14, "Elections", 5, "clean_defunct_voters", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NewTerm
    /// </summary>
    public sealed class EventNewTerm : BaseTuple<BaseVec<BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Types.Primitive.U128>>>
    {
    }
    
    /// <summary>
    /// >> EmptyTerm
    /// </summary>
    public sealed class EventEmptyTerm : BaseTuple
    {
    }
    
    /// <summary>
    /// >> ElectionError
    /// </summary>
    public sealed class EventElectionError : BaseTuple
    {
    }
    
    /// <summary>
    /// >> MemberKicked
    /// </summary>
    public sealed class EventMemberKicked : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Renounced
    /// </summary>
    public sealed class EventRenounced : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> CandidateSlashed
    /// </summary>
    public sealed class EventCandidateSlashed : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> SeatHolderSlashed
    /// </summary>
    public sealed class EventSeatHolderSlashed : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    public enum ElectionsErrors
    {
        
        /// <summary>
        /// >> UnableToVote
        /// </summary>
        UnableToVote,
        
        /// <summary>
        /// >> NoVotes
        /// </summary>
        NoVotes,
        
        /// <summary>
        /// >> TooManyVotes
        /// </summary>
        TooManyVotes,
        
        /// <summary>
        /// >> MaximumVotesExceeded
        /// </summary>
        MaximumVotesExceeded,
        
        /// <summary>
        /// >> LowBalance
        /// </summary>
        LowBalance,
        
        /// <summary>
        /// >> UnableToPayBond
        /// </summary>
        UnableToPayBond,
        
        /// <summary>
        /// >> MustBeVoter
        /// </summary>
        MustBeVoter,
        
        /// <summary>
        /// >> ReportSelf
        /// </summary>
        ReportSelf,
        
        /// <summary>
        /// >> DuplicatedCandidate
        /// </summary>
        DuplicatedCandidate,
        
        /// <summary>
        /// >> MemberSubmit
        /// </summary>
        MemberSubmit,
        
        /// <summary>
        /// >> RunnerUpSubmit
        /// </summary>
        RunnerUpSubmit,
        
        /// <summary>
        /// >> InsufficientCandidateFunds
        /// </summary>
        InsufficientCandidateFunds,
        
        /// <summary>
        /// >> NotMember
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> InvalidWitnessData
        /// </summary>
        InvalidWitnessData,
        
        /// <summary>
        /// >> InvalidVoteCount
        /// </summary>
        InvalidVoteCount,
        
        /// <summary>
        /// >> InvalidRenouncing
        /// </summary>
        InvalidRenouncing,
        
        /// <summary>
        /// >> InvalidReplacement
        /// </summary>
        InvalidReplacement,
    }
}
