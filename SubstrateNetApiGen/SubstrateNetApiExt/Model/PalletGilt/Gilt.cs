//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletGilt;
using SubstrateNetApi.Model.SpArithmetic;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletGilt
{
    
    
    public sealed class GiltStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public GiltStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> QueueTotals
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U128>>> QueueTotals(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Gilt", "QueueTotals", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U128>>>(parameters, token);
        }
        
        /// <summary>
        /// >> Queues
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletGilt.GiltBid>> Queues(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Gilt", "Queues", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletGilt.GiltBid>>(parameters, token);
        }
        
        /// <summary>
        /// >> ActiveTotal
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletGilt.ActiveGiltsTotal> ActiveTotal(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Gilt", "ActiveTotal", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletGilt.ActiveGiltsTotal>(parameters, token);
        }
        
        /// <summary>
        /// >> Active
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletGilt.ActiveGilt> Active(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Gilt", "Active", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletGilt.ActiveGilt>(parameters, token);
        }
    }
    
    public sealed class GiltCalls
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public GiltCalls(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> place_bid
        /// </summary>
        public GenericExtrinsicCall PlaceBid(BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> amount, SubstrateNetApi.Model.Types.Primitive.U32 duration)
        {
            return new GenericExtrinsicCall(37, "Gilt", 0, "place_bid", amount, duration);
        }
        
        /// <summary>
        /// >> retract_bid
        /// </summary>
        public GenericExtrinsicCall RetractBid(BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> amount, SubstrateNetApi.Model.Types.Primitive.U32 duration)
        {
            return new GenericExtrinsicCall(37, "Gilt", 1, "retract_bid", amount, duration);
        }
        
        /// <summary>
        /// >> set_target
        /// </summary>
        public GenericExtrinsicCall SetTarget(BaseCom<SubstrateNetApi.Model.SpArithmetic.Perquintill> target)
        {
            return new GenericExtrinsicCall(37, "Gilt", 2, "set_target", target);
        }
        
        /// <summary>
        /// >> thaw
        /// </summary>
        public GenericExtrinsicCall Thaw(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> index)
        {
            return new GenericExtrinsicCall(37, "Gilt", 3, "thaw", index);
        }
    }
    
    /// <summary>
    /// >> BidPlaced
    /// </summary>
    public sealed class EventBidPlaced : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128, SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> BidRetracted
    /// </summary>
    public sealed class EventBidRetracted : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128, SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> GiltIssued
    /// </summary>
    public sealed class EventGiltIssued : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32, SubstrateNetApi.Model.Types.Primitive.U32, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> GiltThawed
    /// </summary>
    public sealed class EventGiltThawed : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    public enum GiltErrors
    {
        
        /// <summary>
        /// >> DurationTooSmall
        /// </summary>
        DurationTooSmall,
        
        /// <summary>
        /// >> DurationTooBig
        /// </summary>
        DurationTooBig,
        
        /// <summary>
        /// >> AmountTooSmall
        /// </summary>
        AmountTooSmall,
        
        /// <summary>
        /// >> BidTooLow
        /// </summary>
        BidTooLow,
        
        /// <summary>
        /// >> Unknown
        /// </summary>
        Unknown,
        
        /// <summary>
        /// >> NotOwner
        /// </summary>
        NotOwner,
        
        /// <summary>
        /// >> NotExpired
        /// </summary>
        NotExpired,
        
        /// <summary>
        /// >> NotFound
        /// </summary>
        NotFound,
    }
}
