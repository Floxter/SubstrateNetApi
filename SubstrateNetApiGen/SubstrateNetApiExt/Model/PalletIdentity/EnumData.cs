//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Base;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.PalletIdentity
{


    public enum Data
    {

        None,

        Raw0,

        Raw1,

        Raw2,

        Raw3,

        Raw4,

        Raw5,

        Raw6,

        Raw7,

        Raw8,

        Raw9,

        Raw10,

        Raw11,

        Raw12,

        Raw13,

        Raw14,

        Raw15,

        Raw16,

        Raw17,

        Raw18,

        Raw19,

        Raw20,

        Raw21,

        Raw22,

        Raw23,

        Raw24,

        Raw25,

        Raw26,

        Raw27,

        Raw28,

        Raw29,

        Raw30,

        Raw31,

        Raw32,

        BlakeTwo256,

        Sha256,

        Keccak256,

        ShaThree256,
    }

    /// <summary>
    /// >> 246 - Variant[pallet_identity.types.Data]
    /// </summary>
    public sealed class EnumData : BaseEnumExt<Data, BaseVoid, SubstrateNetApi.Model.Base.Arr32U8, SubstrateNetApi.Model.Base.Arr32U8, SubstrateNetApi.Model.Base.Arr32U8, SubstrateNetApi.Model.Base.Arr32U8>
    {
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            var enumByte = byteArray[p];

            Value = (Data)System.Enum.Parse(typeof(Data), enumByte.ToString(), true);
            p += 1;

            Value2 = DecodeOneOf(enumByte, byteArray, ref p);

            TypeSize = p - start;
        }

        private IType DecodeOneOf(byte value, byte[] byteArray, ref int p)
        {
            IType result;
            switch (value)
            {
                case 0: return null;
                case 1: result = new Arr0U8(); result.Decode(byteArray, ref p); return result;
                case 2: result = new Arr1U8(); result.Decode(byteArray, ref p); return result;
                case 3: result = new Arr2U8(); result.Decode(byteArray, ref p); return result;
                case 4: result = new Arr3U8(); result.Decode(byteArray, ref p); return result;
                case 5: result = new Arr4U8(); result.Decode(byteArray, ref p); return result;
                case 6: result = new Arr5U8(); result.Decode(byteArray, ref p); return result;
                case 7: result = new Arr6U8(); result.Decode(byteArray, ref p); return result;
                case 8: result = new Arr7U8(); result.Decode(byteArray, ref p); return result;
                case 9: result = new Arr8U8(); result.Decode(byteArray, ref p); return result;
                case 10: result = new Arr9U8(); result.Decode(byteArray, ref p); return result;
                case 11: result = new Arr10U8(); result.Decode(byteArray, ref p); return result;
                case 12: result = new Arr11U8(); result.Decode(byteArray, ref p); return result;
                case 13: result = new Arr12U8(); result.Decode(byteArray, ref p); return result;
                case 14: result = new Arr13U8(); result.Decode(byteArray, ref p); return result;
                case 15: result = new Arr14U8(); result.Decode(byteArray, ref p); return result;
                case 16: result = new Arr15U8(); result.Decode(byteArray, ref p); return result;
                case 17: result = new Arr16U8(); result.Decode(byteArray, ref p); return result;
                case 18: result = new Arr17U8(); result.Decode(byteArray, ref p); return result;
                case 19: result = new Arr18U8(); result.Decode(byteArray, ref p); return result;
                case 20: result = new Arr19U8(); result.Decode(byteArray, ref p); return result;
                case 21: result = new Arr20U8(); result.Decode(byteArray, ref p); return result;
                case 22: result = new Arr21U8(); result.Decode(byteArray, ref p); return result;
                case 23: result = new Arr22U8(); result.Decode(byteArray, ref p); return result;
                case 24: result = new Arr23U8(); result.Decode(byteArray, ref p); return result;
                case 25: result = new Arr24U8(); result.Decode(byteArray, ref p); return result;
                case 26: result = new Arr25U8(); result.Decode(byteArray, ref p); return result;
                case 27: result = new Arr26U8(); result.Decode(byteArray, ref p); return result;
                case 28: result = new Arr27U8(); result.Decode(byteArray, ref p); return result;
                case 29: result = new Arr28U8(); result.Decode(byteArray, ref p); return result;
                case 30: result = new Arr29U8(); result.Decode(byteArray, ref p); return result;
                case 31: result = new Arr30U8(); result.Decode(byteArray, ref p); return result;
                case 32: result = new Arr31U8(); result.Decode(byteArray, ref p); return result;
                case 33: result = new Arr32U8(); result.Decode(byteArray, ref p); return result;
                default: result = new Arr32U8(); result.Decode(byteArray, ref p); return result;
            }
        }
    }
}
