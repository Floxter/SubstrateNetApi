//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Base;
using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.NodeRuntime;
using SubstrateNetApi.Model.PalletMultisig;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletMultisig
{
    
    
    public sealed class MultisigStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public MultisigStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        public static string MultisigsParams(BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Base.Arr32U8> key)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Multisig", "Multisigs", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return parameters;
        }
        
        /// <summary>
        /// >> Multisigs
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletMultisig.Multisig> Multisigs(BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Base.Arr32U8> key, CancellationToken token)
        {
            string parameters = MultisigStorage.MultisigsParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletMultisig.Multisig>(parameters, token);
        }
        
        public static string CallsParams(SubstrateNetApi.Model.Base.Arr32U8 key)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Multisig", "Calls", Storage.Type.Map, new[] {Storage.Hasher.Identity}, keyParams);
            return parameters;
        }
        
        /// <summary>
        /// >> Calls
        /// </summary>
        public async Task<BaseTuple<BaseVec<SubstrateNetApi.Model.Types.Primitive.U8>,SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Types.Primitive.U128>> Calls(SubstrateNetApi.Model.Base.Arr32U8 key, CancellationToken token)
        {
            string parameters = MultisigStorage.CallsParams(key);
            return await _client.GetStorageAsync<BaseTuple<BaseVec<SubstrateNetApi.Model.Types.Primitive.U8>,SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Types.Primitive.U128>>(parameters, token);
        }
    }
    
    public sealed class MultisigCalls
    {
        
        /// <summary>
        /// >> as_multi_threshold_1
        /// </summary>
        public static Method AsMultiThreshold1(BaseVec<SubstrateNetApi.Model.SpCore.AccountId32> other_signatories, SubstrateNetApi.Model.NodeRuntime.EnumNodeCall call)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(other_signatories.Encode());
            byteArray.AddRange(call.Encode());
            return new Method(31, "Multisig", 0, "as_multi_threshold_1", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> as_multi
        /// </summary>
        public static Method AsMulti(SubstrateNetApi.Model.Types.Primitive.U16 threshold, BaseVec<SubstrateNetApi.Model.SpCore.AccountId32> other_signatories, BaseOpt<SubstrateNetApi.Model.PalletMultisig.Timepoint> maybe_timepoint, BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> call, SubstrateNetApi.Model.Types.Primitive.Bool store_call, SubstrateNetApi.Model.Types.Primitive.U64 max_weight)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(other_signatories.Encode());
            byteArray.AddRange(maybe_timepoint.Encode());
            byteArray.AddRange(call.Encode());
            byteArray.AddRange(store_call.Encode());
            byteArray.AddRange(max_weight.Encode());
            return new Method(31, "Multisig", 1, "as_multi", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> approve_as_multi
        /// </summary>
        public static Method ApproveAsMulti(SubstrateNetApi.Model.Types.Primitive.U16 threshold, BaseVec<SubstrateNetApi.Model.SpCore.AccountId32> other_signatories, BaseOpt<SubstrateNetApi.Model.PalletMultisig.Timepoint> maybe_timepoint, SubstrateNetApi.Model.Base.Arr32U8 call_hash, SubstrateNetApi.Model.Types.Primitive.U64 max_weight)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(other_signatories.Encode());
            byteArray.AddRange(maybe_timepoint.Encode());
            byteArray.AddRange(call_hash.Encode());
            byteArray.AddRange(max_weight.Encode());
            return new Method(31, "Multisig", 2, "approve_as_multi", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_as_multi
        /// </summary>
        public static Method CancelAsMulti(SubstrateNetApi.Model.Types.Primitive.U16 threshold, BaseVec<SubstrateNetApi.Model.SpCore.AccountId32> other_signatories, SubstrateNetApi.Model.PalletMultisig.Timepoint timepoint, SubstrateNetApi.Model.Base.Arr32U8 call_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(other_signatories.Encode());
            byteArray.AddRange(timepoint.Encode());
            byteArray.AddRange(call_hash.Encode());
            return new Method(31, "Multisig", 3, "cancel_as_multi", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NewMultisig
    /// </summary>
    public sealed class EventNewMultisig : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Base.Arr32U8>
    {
    }
    
    /// <summary>
    /// >> MultisigApproval
    /// </summary>
    public sealed class EventMultisigApproval : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.PalletMultisig.Timepoint, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Base.Arr32U8>
    {
    }
    
    /// <summary>
    /// >> MultisigExecuted
    /// </summary>
    public sealed class EventMultisigExecuted : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.PalletMultisig.Timepoint, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Base.Arr32U8, BaseTuple<BaseTuple,  SubstrateNetApi.Model.SpRuntime.EnumDispatchError>>
    {
    }
    
    /// <summary>
    /// >> MultisigCancelled
    /// </summary>
    public sealed class EventMultisigCancelled : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.PalletMultisig.Timepoint, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Base.Arr32U8>
    {
    }
    
    public enum MultisigErrors
    {
        
        /// <summary>
        /// >> MinimumThreshold
        /// </summary>
        MinimumThreshold,
        
        /// <summary>
        /// >> AlreadyApproved
        /// </summary>
        AlreadyApproved,
        
        /// <summary>
        /// >> NoApprovalsNeeded
        /// </summary>
        NoApprovalsNeeded,
        
        /// <summary>
        /// >> TooFewSignatories
        /// </summary>
        TooFewSignatories,
        
        /// <summary>
        /// >> TooManySignatories
        /// </summary>
        TooManySignatories,
        
        /// <summary>
        /// >> SignatoriesOutOfOrder
        /// </summary>
        SignatoriesOutOfOrder,
        
        /// <summary>
        /// >> SenderInSignatories
        /// </summary>
        SenderInSignatories,
        
        /// <summary>
        /// >> NotFound
        /// </summary>
        NotFound,
        
        /// <summary>
        /// >> NotOwner
        /// </summary>
        NotOwner,
        
        /// <summary>
        /// >> NoTimepoint
        /// </summary>
        NoTimepoint,
        
        /// <summary>
        /// >> WrongTimepoint
        /// </summary>
        WrongTimepoint,
        
        /// <summary>
        /// >> UnexpectedTimepoint
        /// </summary>
        UnexpectedTimepoint,
        
        /// <summary>
        /// >> MaxWeightTooLow
        /// </summary>
        MaxWeightTooLow,
        
        /// <summary>
        /// >> AlreadyStored
        /// </summary>
        AlreadyStored,
    }
}
