//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.NodeRuntime;
using SubstrateNetApi.Model.PalletRecovery;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletRecovery
{
    
    
    public sealed class RecoveryStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public RecoveryStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Recoverable
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletRecovery.RecoveryConfig> Recoverable(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Recovery", "Recoverable", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletRecovery.RecoveryConfig>(parameters, token);
        }
        
        /// <summary>
        /// >> ActiveRecoveries
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletRecovery.ActiveRecovery> ActiveRecoveries(BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Recovery", "ActiveRecoveries", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletRecovery.ActiveRecovery>(parameters, token);
        }
        
        /// <summary>
        /// >> Proxy
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Proxy(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Recovery", "Proxy", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
    }
    
    public sealed class RecoveryCalls
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public RecoveryCalls(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> as_recovered
        /// </summary>
        public GenericExtrinsicCall AsRecovered(SubstrateNetApi.Model.SpCore.AccountId32 account, SubstrateNetApi.Model.NodeRuntime.EnumNodeCall call)
        {
            return new GenericExtrinsicCall(27, "Recovery", 0, "as_recovered", account, call);
        }
        
        /// <summary>
        /// >> set_recovered
        /// </summary>
        public GenericExtrinsicCall SetRecovered(SubstrateNetApi.Model.SpCore.AccountId32 lost, SubstrateNetApi.Model.SpCore.AccountId32 rescuer)
        {
            return new GenericExtrinsicCall(27, "Recovery", 1, "set_recovered", lost, rescuer);
        }
        
        /// <summary>
        /// >> create_recovery
        /// </summary>
        public GenericExtrinsicCall CreateRecovery(BaseVec<SubstrateNetApi.Model.SpCore.AccountId32> friends, SubstrateNetApi.Model.Types.Primitive.U16 threshold, SubstrateNetApi.Model.Types.Primitive.U32 delay_period)
        {
            return new GenericExtrinsicCall(27, "Recovery", 2, "create_recovery", friends, threshold, delay_period);
        }
        
        /// <summary>
        /// >> initiate_recovery
        /// </summary>
        public GenericExtrinsicCall InitiateRecovery(SubstrateNetApi.Model.SpCore.AccountId32 account)
        {
            return new GenericExtrinsicCall(27, "Recovery", 3, "initiate_recovery", account);
        }
        
        /// <summary>
        /// >> vouch_recovery
        /// </summary>
        public GenericExtrinsicCall VouchRecovery(SubstrateNetApi.Model.SpCore.AccountId32 lost, SubstrateNetApi.Model.SpCore.AccountId32 rescuer)
        {
            return new GenericExtrinsicCall(27, "Recovery", 4, "vouch_recovery", lost, rescuer);
        }
        
        /// <summary>
        /// >> claim_recovery
        /// </summary>
        public GenericExtrinsicCall ClaimRecovery(SubstrateNetApi.Model.SpCore.AccountId32 account)
        {
            return new GenericExtrinsicCall(27, "Recovery", 5, "claim_recovery", account);
        }
        
        /// <summary>
        /// >> close_recovery
        /// </summary>
        public GenericExtrinsicCall CloseRecovery(SubstrateNetApi.Model.SpCore.AccountId32 rescuer)
        {
            return new GenericExtrinsicCall(27, "Recovery", 6, "close_recovery", rescuer);
        }
        
        /// <summary>
        /// >> remove_recovery
        /// </summary>
        public GenericExtrinsicCall RemoveRecovery()
        {
            return new GenericExtrinsicCall(27, "Recovery", 7, "remove_recovery");
        }
        
        /// <summary>
        /// >> cancel_recovered
        /// </summary>
        public GenericExtrinsicCall CancelRecovered(SubstrateNetApi.Model.SpCore.AccountId32 account)
        {
            return new GenericExtrinsicCall(27, "Recovery", 8, "cancel_recovered", account);
        }
    }
    
    /// <summary>
    /// >> RecoveryCreated
    /// </summary>
    public sealed class EventRecoveryCreated : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> RecoveryInitiated
    /// </summary>
    public sealed class EventRecoveryInitiated : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> RecoveryVouched
    /// </summary>
    public sealed class EventRecoveryVouched : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> RecoveryClosed
    /// </summary>
    public sealed class EventRecoveryClosed : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> AccountRecovered
    /// </summary>
    public sealed class EventAccountRecovered : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> RecoveryRemoved
    /// </summary>
    public sealed class EventRecoveryRemoved : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    public enum RecoveryErrors
    {
        
        /// <summary>
        /// >> NotAllowed
        /// </summary>
        NotAllowed,
        
        /// <summary>
        /// >> ZeroThreshold
        /// </summary>
        ZeroThreshold,
        
        /// <summary>
        /// >> NotEnoughFriends
        /// </summary>
        NotEnoughFriends,
        
        /// <summary>
        /// >> MaxFriends
        /// </summary>
        MaxFriends,
        
        /// <summary>
        /// >> NotSorted
        /// </summary>
        NotSorted,
        
        /// <summary>
        /// >> NotRecoverable
        /// </summary>
        NotRecoverable,
        
        /// <summary>
        /// >> AlreadyRecoverable
        /// </summary>
        AlreadyRecoverable,
        
        /// <summary>
        /// >> AlreadyStarted
        /// </summary>
        AlreadyStarted,
        
        /// <summary>
        /// >> NotStarted
        /// </summary>
        NotStarted,
        
        /// <summary>
        /// >> NotFriend
        /// </summary>
        NotFriend,
        
        /// <summary>
        /// >> DelayPeriod
        /// </summary>
        DelayPeriod,
        
        /// <summary>
        /// >> AlreadyVouched
        /// </summary>
        AlreadyVouched,
        
        /// <summary>
        /// >> Threshold
        /// </summary>
        Threshold,
        
        /// <summary>
        /// >> StillActive
        /// </summary>
        StillActive,
        
        /// <summary>
        /// >> AlreadyProxy
        /// </summary>
        AlreadyProxy,
        
        /// <summary>
        /// >> BadState
        /// </summary>
        BadState,
    }
}
