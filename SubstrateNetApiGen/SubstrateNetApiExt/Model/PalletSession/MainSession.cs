//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.NodeRuntime;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletSession
{
    
    
    public sealed class SessionStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public SessionStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        public static string ValidatorsParams()
        {
            var parameters = RequestGenerator.GetStorage("Session", "Validators", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> Validators
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>> Validators(CancellationToken token)
        {
            string parameters = SessionStorage.ValidatorsParams();
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>(parameters, token);
        }
        
        public static string CurrentIndexParams()
        {
            var parameters = RequestGenerator.GetStorage("Session", "CurrentIndex", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> CurrentIndex
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CurrentIndex(CancellationToken token)
        {
            string parameters = SessionStorage.CurrentIndexParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        public static string QueuedChangedParams()
        {
            var parameters = RequestGenerator.GetStorage("Session", "QueuedChanged", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> QueuedChanged
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> QueuedChanged(CancellationToken token)
        {
            string parameters = SessionStorage.QueuedChangedParams();
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        public static string QueuedKeysParams()
        {
            var parameters = RequestGenerator.GetStorage("Session", "QueuedKeys", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> QueuedKeys
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.NodeRuntime.SessionKeys>>> QueuedKeys(CancellationToken token)
        {
            string parameters = SessionStorage.QueuedKeysParams();
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.NodeRuntime.SessionKeys>>>(parameters, token);
        }
        
        public static string DisabledValidatorsParams()
        {
            var parameters = RequestGenerator.GetStorage("Session", "DisabledValidators", Storage.Type.Plain);
            return parameters;
        }
        
        /// <summary>
        /// >> DisabledValidators
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.Types.Primitive.U32>> DisabledValidators(CancellationToken token)
        {
            string parameters = SessionStorage.DisabledValidatorsParams();
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.Types.Primitive.U32>>(parameters, token);
        }
        
        public static string NextKeysParams(SubstrateNetApi.Model.SpCore.AccountId32 key)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Session", "NextKeys", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return parameters;
        }
        
        /// <summary>
        /// >> NextKeys
        /// </summary>
        public async Task<SubstrateNetApi.Model.NodeRuntime.SessionKeys> NextKeys(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = SessionStorage.NextKeysParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.NodeRuntime.SessionKeys>(parameters, token);
        }
        
        public static string KeyOwnerParams(BaseTuple<SubstrateNetApi.Model.SpCore.KeyTypeId,BaseVec<SubstrateNetApi.Model.Types.Primitive.U8>> key)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Session", "KeyOwner", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return parameters;
        }
        
        /// <summary>
        /// >> KeyOwner
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> KeyOwner(BaseTuple<SubstrateNetApi.Model.SpCore.KeyTypeId,BaseVec<SubstrateNetApi.Model.Types.Primitive.U8>> key, CancellationToken token)
        {
            string parameters = SessionStorage.KeyOwnerParams(key);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
    }
    
    public sealed class SessionCalls
    {
        
        /// <summary>
        /// >> set_keys
        /// </summary>
        public static Method SetKeys(SubstrateNetApi.Model.NodeRuntime.SessionKeys keys, BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(keys.Encode());
            byteArray.AddRange(proof.Encode());
            return new Method(10, "Session", 0, "set_keys", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> purge_keys
        /// </summary>
        public static Method PurgeKeys()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(10, "Session", 1, "purge_keys", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NewSession
    /// </summary>
    public sealed class EventNewSession : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    public enum SessionErrors
    {
        
        /// <summary>
        /// >> InvalidProof
        /// </summary>
        InvalidProof,
        
        /// <summary>
        /// >> NoAssociatedValidatorId
        /// </summary>
        NoAssociatedValidatorId,
        
        /// <summary>
        /// >> DuplicatedKey
        /// </summary>
        DuplicatedKey,
        
        /// <summary>
        /// >> NoKeys
        /// </summary>
        NoKeys,
        
        /// <summary>
        /// >> NoAccount
        /// </summary>
        NoAccount,
    }
}
