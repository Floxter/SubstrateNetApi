//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletSociety;
using SubstrateNetApi.Model.PrimitiveTypes;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.SpRuntime;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletSociety
{
    
    
    public sealed class SocietyStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public SocietyStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Founder
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Founder(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Founder", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> Rules
        /// </summary>
        public async Task<SubstrateNetApi.Model.PrimitiveTypes.H256> Rules(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Rules", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PrimitiveTypes.H256>(parameters, token);
        }
        
        /// <summary>
        /// >> Candidates
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletSociety.Bid>> Candidates(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Candidates", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletSociety.Bid>>(parameters, token);
        }
        
        /// <summary>
        /// >> SuspendedCandidates
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U128,SubstrateNetApi.Model.PalletSociety.EnumBidKind>> SuspendedCandidates(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "SuspendedCandidates", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U128,SubstrateNetApi.Model.PalletSociety.EnumBidKind>>(parameters, token);
        }
        
        /// <summary>
        /// >> Pot
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> Pot(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Pot", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> Head
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Head(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Head", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> Members
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>> Members(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Members", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>(parameters, token);
        }
        
        /// <summary>
        /// >> SuspendedMembers
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> SuspendedMembers(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "SuspendedMembers", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> Bids
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletSociety.Bid>> Bids(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Bids", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletSociety.Bid>>(parameters, token);
        }
        
        /// <summary>
        /// >> Vouching
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletSociety.EnumVouchingStatus> Vouching(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "Vouching", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletSociety.EnumVouchingStatus>(parameters, token);
        }
        
        /// <summary>
        /// >> Payouts
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U128>>> Payouts(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "Payouts", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U128>>>(parameters, token);
        }
        
        /// <summary>
        /// >> Strikes
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> Strikes(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "Strikes", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Votes
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletSociety.EnumVote> Votes(BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Society", "Votes", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletSociety.EnumVote>(parameters, token);
        }
        
        /// <summary>
        /// >> Defender
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Defender(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "Defender", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> DefenderVotes
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletSociety.EnumVote> DefenderVotes(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Society", "DefenderVotes", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletSociety.EnumVote>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxMembers
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MaxMembers(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Society", "MaxMembers", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
    
    public sealed class SocietyCalls
    {
        
        /// <summary>
        /// >> bid
        /// </summary>
        public static Method Bid(SubstrateNetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            return new Method(26, "Society", 0, "bid", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unbid
        /// </summary>
        public static Method Unbid(SubstrateNetApi.Model.Types.Primitive.U32 pos)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pos.Encode());
            return new Method(26, "Society", 1, "unbid", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vouch
        /// </summary>
        public static Method Vouch(SubstrateNetApi.Model.SpCore.AccountId32 who, SubstrateNetApi.Model.Types.Primitive.U128 value, SubstrateNetApi.Model.Types.Primitive.U128 tip)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(tip.Encode());
            return new Method(26, "Society", 2, "vouch", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unvouch
        /// </summary>
        public static Method Unvouch(SubstrateNetApi.Model.Types.Primitive.U32 pos)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pos.Encode());
            return new Method(26, "Society", 3, "unvouch", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// </summary>
        public static Method Vote(SubstrateNetApi.Model.SpRuntime.EnumMultiAddress candidate, SubstrateNetApi.Model.Types.Primitive.Bool approve)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(approve.Encode());
            return new Method(26, "Society", 4, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> defender_vote
        /// </summary>
        public static Method DefenderVote(SubstrateNetApi.Model.Types.Primitive.Bool approve)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(approve.Encode());
            return new Method(26, "Society", 5, "defender_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> payout
        /// </summary>
        public static Method Payout()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(26, "Society", 6, "payout", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> found
        /// </summary>
        public static Method Found(SubstrateNetApi.Model.SpCore.AccountId32 founder, SubstrateNetApi.Model.Types.Primitive.U32 max_members, BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> rules)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(founder.Encode());
            byteArray.AddRange(max_members.Encode());
            byteArray.AddRange(rules.Encode());
            return new Method(26, "Society", 7, "found", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unfound
        /// </summary>
        public static Method Unfound()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(26, "Society", 8, "unfound", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> judge_suspended_member
        /// </summary>
        public static Method JudgeSuspendedMember(SubstrateNetApi.Model.SpCore.AccountId32 who, SubstrateNetApi.Model.Types.Primitive.Bool forgive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(forgive.Encode());
            return new Method(26, "Society", 9, "judge_suspended_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> judge_suspended_candidate
        /// </summary>
        public static Method JudgeSuspendedCandidate(SubstrateNetApi.Model.SpCore.AccountId32 who, SubstrateNetApi.Model.PalletSociety.EnumJudgement judgement)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(judgement.Encode());
            return new Method(26, "Society", 10, "judge_suspended_candidate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_max_members
        /// </summary>
        public static Method SetMaxMembers(SubstrateNetApi.Model.Types.Primitive.U32 max)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(max.Encode());
            return new Method(26, "Society", 11, "set_max_members", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> Founded
    /// </summary>
    public sealed class EventFounded : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Bid
    /// </summary>
    public sealed class EventBid : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Vouch
    /// </summary>
    public sealed class EventVouch : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> AutoUnbid
    /// </summary>
    public sealed class EventAutoUnbid : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Unbid
    /// </summary>
    public sealed class EventUnbid : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Unvouch
    /// </summary>
    public sealed class EventUnvouch : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Inducted
    /// </summary>
    public sealed class EventInducted : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>
    {
    }
    
    /// <summary>
    /// >> SuspendedMemberJudgement
    /// </summary>
    public sealed class EventSuspendedMemberJudgement : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.Bool>
    {
    }
    
    /// <summary>
    /// >> CandidateSuspended
    /// </summary>
    public sealed class EventCandidateSuspended : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> MemberSuspended
    /// </summary>
    public sealed class EventMemberSuspended : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Challenged
    /// </summary>
    public sealed class EventChallenged : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Vote
    /// </summary>
    public sealed class EventVote : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.Bool>
    {
    }
    
    /// <summary>
    /// >> DefenderVote
    /// </summary>
    public sealed class EventDefenderVote : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.Bool>
    {
    }
    
    /// <summary>
    /// >> NewMaxMembers
    /// </summary>
    public sealed class EventNewMaxMembers : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> Unfounded
    /// </summary>
    public sealed class EventUnfounded : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> Deposit
    /// </summary>
    public sealed class EventDeposit : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    public enum SocietyErrors
    {
        
        /// <summary>
        /// >> BadPosition
        /// </summary>
        BadPosition,
        
        /// <summary>
        /// >> NotMember
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> AlreadyMember
        /// </summary>
        AlreadyMember,
        
        /// <summary>
        /// >> Suspended
        /// </summary>
        Suspended,
        
        /// <summary>
        /// >> NotSuspended
        /// </summary>
        NotSuspended,
        
        /// <summary>
        /// >> NoPayout
        /// </summary>
        NoPayout,
        
        /// <summary>
        /// >> AlreadyFounded
        /// </summary>
        AlreadyFounded,
        
        /// <summary>
        /// >> InsufficientPot
        /// </summary>
        InsufficientPot,
        
        /// <summary>
        /// >> AlreadyVouching
        /// </summary>
        AlreadyVouching,
        
        /// <summary>
        /// >> NotVouching
        /// </summary>
        NotVouching,
        
        /// <summary>
        /// >> Head
        /// </summary>
        Head,
        
        /// <summary>
        /// >> Founder
        /// </summary>
        Founder,
        
        /// <summary>
        /// >> AlreadyBid
        /// </summary>
        AlreadyBid,
        
        /// <summary>
        /// >> AlreadyCandidate
        /// </summary>
        AlreadyCandidate,
        
        /// <summary>
        /// >> NotCandidate
        /// </summary>
        NotCandidate,
        
        /// <summary>
        /// >> MaxMembers
        /// </summary>
        MaxMembers,
        
        /// <summary>
        /// >> NotFounder
        /// </summary>
        NotFounder,
        
        /// <summary>
        /// >> NotHead
        /// </summary>
        NotHead,
    }
}
