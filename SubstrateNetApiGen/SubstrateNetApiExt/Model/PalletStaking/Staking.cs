//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletStaking;
using SubstrateNetApi.Model.SpArithmetic;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.SpRuntime;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletStaking
{
    
    
    public sealed class StakingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public StakingStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> HistoryDepth
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> HistoryDepth(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "HistoryDepth", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ValidatorCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ValidatorCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "ValidatorCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MinimumValidatorCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MinimumValidatorCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MinimumValidatorCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Invulnerables
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>> Invulnerables(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "Invulnerables", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.SpCore.AccountId32>>(parameters, token);
        }
        
        /// <summary>
        /// >> Bonded
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpCore.AccountId32> Bonded(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Bonded", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpCore.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> MinNominatorBond
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> MinNominatorBond(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MinNominatorBond", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> MinValidatorBond
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> MinValidatorBond(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MinValidatorBond", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> Ledger
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.StakingLedger> Ledger(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Ledger", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.StakingLedger>(parameters, token);
        }
        
        /// <summary>
        /// >> Payee
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.EnumRewardDestination> Payee(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Payee", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.EnumRewardDestination>(parameters, token);
        }
        
        /// <summary>
        /// >> Validators
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.ValidatorPrefs> Validators(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Validators", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.ValidatorPrefs>(parameters, token);
        }
        
        /// <summary>
        /// >> CounterForValidators
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CounterForValidators(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CounterForValidators", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxValidatorsCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MaxValidatorsCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MaxValidatorsCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> Nominators
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.Nominations> Nominators(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "Nominators", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.Nominations>(parameters, token);
        }
        
        /// <summary>
        /// >> CounterForNominators
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CounterForNominators(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CounterForNominators", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxNominatorsCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MaxNominatorsCount(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "MaxNominatorsCount", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> CurrentEra
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CurrentEra(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CurrentEra", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ActiveEra
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.ActiveEraInfo> ActiveEra(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "ActiveEra", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.ActiveEraInfo>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasStartSessionIndex
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ErasStartSessionIndex(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "ErasStartSessionIndex", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasStakers
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.Exposure> ErasStakers(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "ErasStakers", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.Exposure>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasStakersClipped
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.Exposure> ErasStakersClipped(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "ErasStakersClipped", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.Exposure>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasValidatorPrefs
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.ValidatorPrefs> ErasValidatorPrefs(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "ErasValidatorPrefs", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.ValidatorPrefs>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasValidatorReward
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> ErasValidatorReward(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "ErasValidatorReward", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasRewardPoints
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.EraRewardPoints> ErasRewardPoints(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "ErasRewardPoints", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.EraRewardPoints>(parameters, token);
        }
        
        /// <summary>
        /// >> ErasTotalStake
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> ErasTotalStake(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "ErasTotalStake", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> ForceEra
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.EnumForcing> ForceEra(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "ForceEra", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.EnumForcing>(parameters, token);
        }
        
        /// <summary>
        /// >> SlashRewardFraction
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpArithmetic.Perbill> SlashRewardFraction(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "SlashRewardFraction", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpArithmetic.Perbill>(parameters, token);
        }
        
        /// <summary>
        /// >> CanceledSlashPayout
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> CanceledSlashPayout(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CanceledSlashPayout", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> UnappliedSlashes
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletStaking.UnappliedSlash>> UnappliedSlashes(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "UnappliedSlashes", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletStaking.UnappliedSlash>>(parameters, token);
        }
        
        /// <summary>
        /// >> BondedEras
        /// </summary>
        public async Task<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>> BondedEras(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "BondedEras", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.Types.Primitive.U32>>>(parameters, token);
        }
        
        /// <summary>
        /// >> ValidatorSlashInEra
        /// </summary>
        public async Task<BaseTuple<SubstrateNetApi.Model.SpArithmetic.Perbill,SubstrateNetApi.Model.Types.Primitive.U128>> ValidatorSlashInEra(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "ValidatorSlashInEra", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNetApi.Model.SpArithmetic.Perbill,SubstrateNetApi.Model.Types.Primitive.U128>>(parameters, token);
        }
        
        /// <summary>
        /// >> NominatorSlashInEra
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> NominatorSlashInEra(BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32,SubstrateNetApi.Model.SpCore.AccountId32> key, CancellationToken token)
        {
            var keyParams = key.Value;
            var parameters = RequestGenerator.GetStorage("Staking", "NominatorSlashInEra", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat,Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> SlashingSpans
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.SlashingSpans> SlashingSpans(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "SlashingSpans", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.SlashingSpans>(parameters, token);
        }
        
        /// <summary>
        /// >> SpanSlash
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.SpanRecord> SpanSlash(BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32,SubstrateNetApi.Model.Types.Primitive.U32> key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Staking", "SpanSlash", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.SpanRecord>(parameters, token);
        }
        
        /// <summary>
        /// >> EarliestUnappliedSlash
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> EarliestUnappliedSlash(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "EarliestUnappliedSlash", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> CurrentPlannedSession
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> CurrentPlannedSession(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "CurrentPlannedSession", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> StorageVersion
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletStaking.EnumReleases> StorageVersion(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "StorageVersion", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletStaking.EnumReleases>(parameters, token);
        }
        
        /// <summary>
        /// >> ChillThreshold
        /// </summary>
        public async Task<SubstrateNetApi.Model.SpArithmetic.Percent> ChillThreshold(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Staking", "ChillThreshold", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.SpArithmetic.Percent>(parameters, token);
        }
    }
    
    public sealed class StakingCalls
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public StakingCalls(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> bond
        /// </summary>
        public GenericExtrinsicCall Bond(SubstrateNetApi.Model.SpRuntime.EnumMultiAddress controller, BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> value, SubstrateNetApi.Model.PalletStaking.EnumRewardDestination payee)
        {
            return new GenericExtrinsicCall(9, "Staking", 0, "bond", controller, value, payee);
        }
        
        /// <summary>
        /// >> bond_extra
        /// </summary>
        public GenericExtrinsicCall BondExtra(BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> max_additional)
        {
            return new GenericExtrinsicCall(9, "Staking", 1, "bond_extra", max_additional);
        }
        
        /// <summary>
        /// >> unbond
        /// </summary>
        public GenericExtrinsicCall Unbond(BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> value)
        {
            return new GenericExtrinsicCall(9, "Staking", 2, "unbond", value);
        }
        
        /// <summary>
        /// >> withdraw_unbonded
        /// </summary>
        public GenericExtrinsicCall WithdrawUnbonded(SubstrateNetApi.Model.Types.Primitive.U32 num_slashing_spans)
        {
            return new GenericExtrinsicCall(9, "Staking", 3, "withdraw_unbonded", num_slashing_spans);
        }
        
        /// <summary>
        /// >> validate
        /// </summary>
        public GenericExtrinsicCall Validate(SubstrateNetApi.Model.PalletStaking.ValidatorPrefs prefs)
        {
            return new GenericExtrinsicCall(9, "Staking", 4, "validate", prefs);
        }
        
        /// <summary>
        /// >> nominate
        /// </summary>
        public GenericExtrinsicCall Nominate(BaseVec<SubstrateNetApi.Model.SpRuntime.EnumMultiAddress> targets)
        {
            return new GenericExtrinsicCall(9, "Staking", 5, "nominate", targets);
        }
        
        /// <summary>
        /// >> chill
        /// </summary>
        public GenericExtrinsicCall Chill()
        {
            return new GenericExtrinsicCall(9, "Staking", 6, "chill");
        }
        
        /// <summary>
        /// >> set_payee
        /// </summary>
        public GenericExtrinsicCall SetPayee(SubstrateNetApi.Model.PalletStaking.EnumRewardDestination payee)
        {
            return new GenericExtrinsicCall(9, "Staking", 7, "set_payee", payee);
        }
        
        /// <summary>
        /// >> set_controller
        /// </summary>
        public GenericExtrinsicCall SetController(SubstrateNetApi.Model.SpRuntime.EnumMultiAddress controller)
        {
            return new GenericExtrinsicCall(9, "Staking", 8, "set_controller", controller);
        }
        
        /// <summary>
        /// >> set_validator_count
        /// </summary>
        public GenericExtrinsicCall SetValidatorCount(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> @new)
        {
            return new GenericExtrinsicCall(9, "Staking", 9, "set_validator_count", @new);
        }
        
        /// <summary>
        /// >> increase_validator_count
        /// </summary>
        public GenericExtrinsicCall IncreaseValidatorCount(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> additional)
        {
            return new GenericExtrinsicCall(9, "Staking", 10, "increase_validator_count", additional);
        }
        
        /// <summary>
        /// >> scale_validator_count
        /// </summary>
        public GenericExtrinsicCall ScaleValidatorCount(SubstrateNetApi.Model.SpArithmetic.Percent factor)
        {
            return new GenericExtrinsicCall(9, "Staking", 11, "scale_validator_count", factor);
        }
        
        /// <summary>
        /// >> force_no_eras
        /// </summary>
        public GenericExtrinsicCall ForceNoEras()
        {
            return new GenericExtrinsicCall(9, "Staking", 12, "force_no_eras");
        }
        
        /// <summary>
        /// >> force_new_era
        /// </summary>
        public GenericExtrinsicCall ForceNewEra()
        {
            return new GenericExtrinsicCall(9, "Staking", 13, "force_new_era");
        }
        
        /// <summary>
        /// >> set_invulnerables
        /// </summary>
        public GenericExtrinsicCall SetInvulnerables(BaseVec<SubstrateNetApi.Model.SpCore.AccountId32> invulnerables)
        {
            return new GenericExtrinsicCall(9, "Staking", 14, "set_invulnerables", invulnerables);
        }
        
        /// <summary>
        /// >> force_unstake
        /// </summary>
        public GenericExtrinsicCall ForceUnstake(SubstrateNetApi.Model.SpCore.AccountId32 stash, SubstrateNetApi.Model.Types.Primitive.U32 num_slashing_spans)
        {
            return new GenericExtrinsicCall(9, "Staking", 15, "force_unstake", stash, num_slashing_spans);
        }
        
        /// <summary>
        /// >> force_new_era_always
        /// </summary>
        public GenericExtrinsicCall ForceNewEraAlways()
        {
            return new GenericExtrinsicCall(9, "Staking", 16, "force_new_era_always");
        }
        
        /// <summary>
        /// >> cancel_deferred_slash
        /// </summary>
        public GenericExtrinsicCall CancelDeferredSlash(SubstrateNetApi.Model.Types.Primitive.U32 era, BaseVec<SubstrateNetApi.Model.Types.Primitive.U32> slash_indices)
        {
            return new GenericExtrinsicCall(9, "Staking", 17, "cancel_deferred_slash", era, slash_indices);
        }
        
        /// <summary>
        /// >> payout_stakers
        /// </summary>
        public GenericExtrinsicCall PayoutStakers(SubstrateNetApi.Model.SpCore.AccountId32 validator_stash, SubstrateNetApi.Model.Types.Primitive.U32 era)
        {
            return new GenericExtrinsicCall(9, "Staking", 18, "payout_stakers", validator_stash, era);
        }
        
        /// <summary>
        /// >> rebond
        /// </summary>
        public GenericExtrinsicCall Rebond(BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> value)
        {
            return new GenericExtrinsicCall(9, "Staking", 19, "rebond", value);
        }
        
        /// <summary>
        /// >> set_history_depth
        /// </summary>
        public GenericExtrinsicCall SetHistoryDepth(BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> new_history_depth, BaseCom<SubstrateNetApi.Model.Types.Primitive.U32> era_items_deleted)
        {
            return new GenericExtrinsicCall(9, "Staking", 20, "set_history_depth", new_history_depth, era_items_deleted);
        }
        
        /// <summary>
        /// >> reap_stash
        /// </summary>
        public GenericExtrinsicCall ReapStash(SubstrateNetApi.Model.SpCore.AccountId32 stash, SubstrateNetApi.Model.Types.Primitive.U32 num_slashing_spans)
        {
            return new GenericExtrinsicCall(9, "Staking", 21, "reap_stash", stash, num_slashing_spans);
        }
        
        /// <summary>
        /// >> kick
        /// </summary>
        public GenericExtrinsicCall Kick(BaseVec<SubstrateNetApi.Model.SpRuntime.EnumMultiAddress> who)
        {
            return new GenericExtrinsicCall(9, "Staking", 22, "kick", who);
        }
        
        /// <summary>
        /// >> set_staking_limits
        /// </summary>
        public GenericExtrinsicCall SetStakingLimits(SubstrateNetApi.Model.Types.Primitive.U128 min_nominator_bond, SubstrateNetApi.Model.Types.Primitive.U128 min_validator_bond, BaseOpt<SubstrateNetApi.Model.Types.Primitive.U32> max_nominator_count, BaseOpt<SubstrateNetApi.Model.Types.Primitive.U32> max_validator_count, BaseOpt<SubstrateNetApi.Model.SpArithmetic.Percent> threshold)
        {
            return new GenericExtrinsicCall(9, "Staking", 23, "set_staking_limits", min_nominator_bond, min_validator_bond, max_nominator_count, max_validator_count, threshold);
        }
        
        /// <summary>
        /// >> chill_other
        /// </summary>
        public GenericExtrinsicCall ChillOther(SubstrateNetApi.Model.SpCore.AccountId32 controller)
        {
            return new GenericExtrinsicCall(9, "Staking", 24, "chill_other", controller);
        }
    }
    
    /// <summary>
    /// >> EraPaid
    /// </summary>
    public sealed class EventEraPaid : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32, SubstrateNetApi.Model.Types.Primitive.U128, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Rewarded
    /// </summary>
    public sealed class EventRewarded : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Slashed
    /// </summary>
    public sealed class EventSlashed : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> OldSlashingReportDiscarded
    /// </summary>
    public sealed class EventOldSlashingReportDiscarded : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> StakersElected
    /// </summary>
    public sealed class EventStakersElected : BaseTuple
    {
    }
    
    /// <summary>
    /// >> Bonded
    /// </summary>
    public sealed class EventBonded : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Unbonded
    /// </summary>
    public sealed class EventUnbonded : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Withdrawn
    /// </summary>
    public sealed class EventWithdrawn : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> Kicked
    /// </summary>
    public sealed class EventKicked : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> StakingElectionFailed
    /// </summary>
    public sealed class EventStakingElectionFailed : BaseTuple
    {
    }
    
    /// <summary>
    /// >> Chilled
    /// </summary>
    public sealed class EventChilled : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    /// <summary>
    /// >> PayoutStarted
    /// </summary>
    public sealed class EventPayoutStarted : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32, SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    public enum StakingErrors
    {
        
        /// <summary>
        /// >> NotController
        /// </summary>
        NotController,
        
        /// <summary>
        /// >> NotStash
        /// </summary>
        NotStash,
        
        /// <summary>
        /// >> AlreadyBonded
        /// </summary>
        AlreadyBonded,
        
        /// <summary>
        /// >> AlreadyPaired
        /// </summary>
        AlreadyPaired,
        
        /// <summary>
        /// >> EmptyTargets
        /// </summary>
        EmptyTargets,
        
        /// <summary>
        /// >> DuplicateIndex
        /// </summary>
        DuplicateIndex,
        
        /// <summary>
        /// >> InvalidSlashIndex
        /// </summary>
        InvalidSlashIndex,
        
        /// <summary>
        /// >> InsufficientBond
        /// </summary>
        InsufficientBond,
        
        /// <summary>
        /// >> NoMoreChunks
        /// </summary>
        NoMoreChunks,
        
        /// <summary>
        /// >> NoUnlockChunk
        /// </summary>
        NoUnlockChunk,
        
        /// <summary>
        /// >> FundedTarget
        /// </summary>
        FundedTarget,
        
        /// <summary>
        /// >> InvalidEraToReward
        /// </summary>
        InvalidEraToReward,
        
        /// <summary>
        /// >> InvalidNumberOfNominations
        /// </summary>
        InvalidNumberOfNominations,
        
        /// <summary>
        /// >> NotSortedAndUnique
        /// </summary>
        NotSortedAndUnique,
        
        /// <summary>
        /// >> AlreadyClaimed
        /// </summary>
        AlreadyClaimed,
        
        /// <summary>
        /// >> IncorrectHistoryDepth
        /// </summary>
        IncorrectHistoryDepth,
        
        /// <summary>
        /// >> IncorrectSlashingSpans
        /// </summary>
        IncorrectSlashingSpans,
        
        /// <summary>
        /// >> BadState
        /// </summary>
        BadState,
        
        /// <summary>
        /// >> TooManyTargets
        /// </summary>
        TooManyTargets,
        
        /// <summary>
        /// >> BadTarget
        /// </summary>
        BadTarget,
        
        /// <summary>
        /// >> CannotChillOther
        /// </summary>
        CannotChillOther,
        
        /// <summary>
        /// >> TooManyNominators
        /// </summary>
        TooManyNominators,
        
        /// <summary>
        /// >> TooManyValidators
        /// </summary>
        TooManyValidators,
    }
}
