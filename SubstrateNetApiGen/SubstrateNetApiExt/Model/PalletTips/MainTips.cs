//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletTips;
using SubstrateNetApi.Model.PrimitiveTypes;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletTips
{
    
    
    public sealed class TipsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public TipsStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Tips
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletTips.OpenTip> Tips(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Tips", "Tips", Storage.Type.Map, new[] {Storage.Hasher.Twox64Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletTips.OpenTip>(parameters, token);
        }
        
        /// <summary>
        /// >> Reasons
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.Types.Primitive.U8>> Reasons(SubstrateNetApi.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Tips", "Reasons", Storage.Type.Map, new[] {Storage.Hasher.Identity}, keyParams);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.Types.Primitive.U8>>(parameters, token);
        }
    }
    
    public sealed class TipsCalls
    {
        
        /// <summary>
        /// >> report_awesome
        /// </summary>
        public static Method ReportAwesome(BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> reason, SubstrateNetApi.Model.SpCore.AccountId32 who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reason.Encode());
            byteArray.AddRange(who.Encode());
            return new Method(33, "Tips", 0, "report_awesome", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> retract_tip
        /// </summary>
        public static Method RetractTip(SubstrateNetApi.Model.PrimitiveTypes.H256 hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(hash.Encode());
            return new Method(33, "Tips", 1, "retract_tip", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> tip_new
        /// </summary>
        public static Method TipNew(BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> reason, SubstrateNetApi.Model.SpCore.AccountId32 who, BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> tip_value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reason.Encode());
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(tip_value.Encode());
            return new Method(33, "Tips", 2, "tip_new", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> tip
        /// </summary>
        public static Method Tip(SubstrateNetApi.Model.PrimitiveTypes.H256 hash, BaseCom<SubstrateNetApi.Model.Types.Primitive.U128> tip_value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(hash.Encode());
            byteArray.AddRange(tip_value.Encode());
            return new Method(33, "Tips", 3, "tip", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close_tip
        /// </summary>
        public static Method CloseTip(SubstrateNetApi.Model.PrimitiveTypes.H256 hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(hash.Encode());
            return new Method(33, "Tips", 4, "close_tip", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> slash_tip
        /// </summary>
        public static Method SlashTip(SubstrateNetApi.Model.PrimitiveTypes.H256 hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(hash.Encode());
            return new Method(33, "Tips", 5, "slash_tip", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> NewTip
    /// </summary>
    public sealed class EventNewTip : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256>
    {
    }
    
    /// <summary>
    /// >> TipClosing
    /// </summary>
    public sealed class EventTipClosing : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256>
    {
    }
    
    /// <summary>
    /// >> TipClosed
    /// </summary>
    public sealed class EventTipClosed : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> TipRetracted
    /// </summary>
    public sealed class EventTipRetracted : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256>
    {
    }
    
    /// <summary>
    /// >> TipSlashed
    /// </summary>
    public sealed class EventTipSlashed : BaseTuple<SubstrateNetApi.Model.PrimitiveTypes.H256, SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    public enum TipsErrors
    {
        
        /// <summary>
        /// >> ReasonTooBig
        /// </summary>
        ReasonTooBig,
        
        /// <summary>
        /// >> AlreadyKnown
        /// </summary>
        AlreadyKnown,
        
        /// <summary>
        /// >> UnknownTip
        /// </summary>
        UnknownTip,
        
        /// <summary>
        /// >> NotFinder
        /// </summary>
        NotFinder,
        
        /// <summary>
        /// >> StillOpen
        /// </summary>
        StillOpen,
        
        /// <summary>
        /// >> Premature
        /// </summary>
        Premature,
    }
}
