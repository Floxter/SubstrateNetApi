//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletTransactionStorage;
using SubstrateNetApi.Model.SpTransactionStorageProof;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletTransactionStorage
{
    
    
    public sealed class TransactionStorageStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public TransactionStorageStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Transactions
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletTransactionStorage.TransactionInfo>> Transactions(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "Transactions", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletTransactionStorage.TransactionInfo>>(parameters, token);
        }
        
        /// <summary>
        /// >> ChunkCount
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> ChunkCount(SubstrateNetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "ChunkCount", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ByteFee
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> ByteFee(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "ByteFee", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> EntryFee
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U128> EntryFee(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "EntryFee", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxTransactionSize
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MaxTransactionSize(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "MaxTransactionSize", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxBlockTransactions
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> MaxBlockTransactions(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "MaxBlockTransactions", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> StoragePeriod
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.U32> StoragePeriod(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "StoragePeriod", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> BlockTransactions
        /// </summary>
        public async Task<BaseVec<SubstrateNetApi.Model.PalletTransactionStorage.TransactionInfo>> BlockTransactions(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "BlockTransactions", Storage.Type.Plain);
            return await _client.GetStorageAsync<BaseVec<SubstrateNetApi.Model.PalletTransactionStorage.TransactionInfo>>(parameters, token);
        }
        
        /// <summary>
        /// >> ProofChecked
        /// </summary>
        public async Task<SubstrateNetApi.Model.Types.Primitive.Bool> ProofChecked(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("TransactionStorage", "ProofChecked", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
    }
    
    public sealed class TransactionStorageCalls
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public TransactionStorageCalls(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> store
        /// </summary>
        public GenericExtrinsicCall Store(BaseVec<SubstrateNetApi.Model.Types.Primitive.U8> data)
        {
            return new GenericExtrinsicCall(39, "TransactionStorage", 0, "store", data);
        }
        
        /// <summary>
        /// >> renew
        /// </summary>
        public GenericExtrinsicCall Renew(SubstrateNetApi.Model.Types.Primitive.U32 block, SubstrateNetApi.Model.Types.Primitive.U32 index)
        {
            return new GenericExtrinsicCall(39, "TransactionStorage", 1, "renew", block, index);
        }
        
        /// <summary>
        /// >> check_proof
        /// </summary>
        public GenericExtrinsicCall CheckProof(SubstrateNetApi.Model.SpTransactionStorageProof.TransactionStorageProof proof)
        {
            return new GenericExtrinsicCall(39, "TransactionStorage", 2, "check_proof", proof);
        }
    }
    
    /// <summary>
    /// >> Stored
    /// </summary>
    public sealed class EventStored : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> Renewed
    /// </summary>
    public sealed class EventRenewed : BaseTuple<SubstrateNetApi.Model.Types.Primitive.U32>
    {
    }
    
    /// <summary>
    /// >> ProofChecked
    /// </summary>
    public sealed class EventProofChecked : BaseTuple
    {
    }
    
    public enum TransactionStorageErrors
    {
        
        /// <summary>
        /// >> InsufficientFunds
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> NotConfigured
        /// </summary>
        NotConfigured,
        
        /// <summary>
        /// >> RenewedNotFound
        /// </summary>
        RenewedNotFound,
        
        /// <summary>
        /// >> EmptyTransaction
        /// </summary>
        EmptyTransaction,
        
        /// <summary>
        /// >> UnexpectedProof
        /// </summary>
        UnexpectedProof,
        
        /// <summary>
        /// >> InvalidProof
        /// </summary>
        InvalidProof,
        
        /// <summary>
        /// >> MissingProof
        /// </summary>
        MissingProof,
        
        /// <summary>
        /// >> MissingStateData
        /// </summary>
        MissingStateData,
        
        /// <summary>
        /// >> DoubleCheck
        /// </summary>
        DoubleCheck,
        
        /// <summary>
        /// >> ProofNotChecked
        /// </summary>
        ProofNotChecked,
        
        /// <summary>
        /// >> TransactionTooLarge
        /// </summary>
        TransactionTooLarge,
        
        /// <summary>
        /// >> TooManyTransactions
        /// </summary>
        TooManyTransactions,
        
        /// <summary>
        /// >> BadContext
        /// </summary>
        BadContext,
    }
}
