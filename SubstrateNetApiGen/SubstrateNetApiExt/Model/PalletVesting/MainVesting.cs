//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Extrinsics;
using SubstrateNetApi.Model.FrameSupport;
using SubstrateNetApi.Model.Meta;
using SubstrateNetApi.Model.PalletVesting;
using SubstrateNetApi.Model.SpCore;
using SubstrateNetApi.Model.SpRuntime;
using SubstrateNetApi.Model.Types;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Primitive;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNetApi.Model.PalletVesting
{
    
    
    public sealed class VestingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateNetApi.SubstrateClient _client;
        
        public VestingStorage(SubstrateNetApi.SubstrateClient client)
        {
            this._client = client;
        }
        
        /// <summary>
        /// >> Vesting
        /// </summary>
        public async Task<SubstrateNetApi.Model.FrameSupport.BoundedVec> Vesting(SubstrateNetApi.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            var keyParams = new IType[] { key };
            var parameters = RequestGenerator.GetStorage("Vesting", "Vesting", Storage.Type.Map, new[] {Storage.Hasher.BlakeTwo128Concat}, keyParams);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.FrameSupport.BoundedVec>(parameters, token);
        }
        
        /// <summary>
        /// >> StorageVersion
        /// </summary>
        public async Task<SubstrateNetApi.Model.PalletVesting.EnumReleases> StorageVersion(CancellationToken token)
        {
            var parameters = RequestGenerator.GetStorage("Vesting", "StorageVersion", Storage.Type.Plain);
            return await _client.GetStorageAsync<SubstrateNetApi.Model.PalletVesting.EnumReleases>(parameters, token);
        }
    }
    
    public sealed class VestingCalls
    {
        
        /// <summary>
        /// >> vest
        /// </summary>
        public static Method Vest()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(28, "Vesting", 0, "vest", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vest_other
        /// </summary>
        public static Method VestOther(SubstrateNetApi.Model.SpRuntime.EnumMultiAddress target)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            return new Method(28, "Vesting", 1, "vest_other", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vested_transfer
        /// </summary>
        public static Method VestedTransfer(SubstrateNetApi.Model.SpRuntime.EnumMultiAddress target, SubstrateNetApi.Model.PalletVesting.VestingInfo schedule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(schedule.Encode());
            return new Method(28, "Vesting", 2, "vested_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_vested_transfer
        /// </summary>
        public static Method ForceVestedTransfer(SubstrateNetApi.Model.SpRuntime.EnumMultiAddress source, SubstrateNetApi.Model.SpRuntime.EnumMultiAddress target, SubstrateNetApi.Model.PalletVesting.VestingInfo schedule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source.Encode());
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(schedule.Encode());
            return new Method(28, "Vesting", 3, "force_vested_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> merge_schedules
        /// </summary>
        public static Method MergeSchedules(SubstrateNetApi.Model.Types.Primitive.U32 schedule1_index, SubstrateNetApi.Model.Types.Primitive.U32 schedule2_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(schedule1_index.Encode());
            byteArray.AddRange(schedule2_index.Encode());
            return new Method(28, "Vesting", 4, "merge_schedules", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> VestingUpdated
    /// </summary>
    public sealed class EventVestingUpdated : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32, SubstrateNetApi.Model.Types.Primitive.U128>
    {
    }
    
    /// <summary>
    /// >> VestingCompleted
    /// </summary>
    public sealed class EventVestingCompleted : BaseTuple<SubstrateNetApi.Model.SpCore.AccountId32>
    {
    }
    
    public enum VestingErrors
    {
        
        /// <summary>
        /// >> NotVesting
        /// </summary>
        NotVesting,
        
        /// <summary>
        /// >> AtMaxVestingSchedules
        /// </summary>
        AtMaxVestingSchedules,
        
        /// <summary>
        /// >> AmountLow
        /// </summary>
        AmountLow,
        
        /// <summary>
        /// >> ScheduleIndexOutOfBounds
        /// </summary>
        ScheduleIndexOutOfBounds,
        
        /// <summary>
        /// >> InvalidScheduleParams
        /// </summary>
        InvalidScheduleParams,
    }
}
